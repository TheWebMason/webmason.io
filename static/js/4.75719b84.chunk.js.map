{"version":3,"sources":["pages/HomePage.js","connectors/NetworkConnector.ts","connectors/index.ts","components/Page.js","components/Seo.js","components/Header.js","hooks/index.ts","hooks/useAuth.ts","components/Footer.js"],"names":["hot","module","props","as","textAlign","Content","Subheader","RequestError","message","code","data","Error","MiniRpcProvider","chainId","url","batchWaitTimeMs","isMetaMask","host","path","nextId","batchTimeoutId","batch","clearBatch","a","console","info","fetch","method","headers","accept","body","JSON","stringify","map","item","request","response","forEach","reject","ok","status","statusText","json","byKey","reduce","memo","current","id","result","resolve","undefined","error","sendAsync","callback","params","then","jsonrpc","catch","toString","promise","Promise","push","setTimeout","this","parsed","URL","pathname","NetworkConnector","urls","defaultChainId","invariant","Object","keys","length","supportedChainIds","k","Number","providers","currentChainId","accumulator","provider","account","AbstractConnector","injected","InjectedConnector","connectorsByName","ConnectorNames","Injected","title","description","meta","children","style","minHeight","metaDescription","defaultTitle","appName","htmlAttributes","lang","titleTemplate","name","content","property","concat","href","rel","useEagerConnect","context","useActiveWeb3React","library","active","useAuth","accountShort","login","logout","substring","fixed","size","inverted","Item","header","Link","to","routerPaths","main","position","useWeb3ReactCore","contextNetwork","NetworkContextName","activate","useState","tried","setTried","useEffect","isAuthorized","useWeb3React","deactivate","useCallback","connectorID","connector","window","localStorage","removeItem","connectorLocalStorageKey","UnsupportedChainIdError","toast","NoEthereumProviderError","UserRejectedRequestErrorInjected","vertical","link","horizontal","Date","getFullYear"],"mappings":"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","file":"static/js/4.75719b84.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Container, Header, Grid, Input, Button } from 'semantic-ui-react';\nimport Page from '../components/Page';\n\n\n\nfunction HomePage(props) {\n  return (\n    <Page >\n      <Container>\n        <br />\n        <Header as='h1' textAlign='center'>\n          <Header.Content>\n            Soon...\n            <Header.Subheader></Header.Subheader>\n          </Header.Content>\n        </Header>\n      </Container>\n    </Page>\n  );\n};\n\nexport default hot(module)(HomePage);\n","// https://github.com/pancakeswap/pancake-swap-interface-v1/blob/master/src/connectors/NetworkConnector.ts\nimport { ConnectorUpdate } from '@web3-react/types';\nimport { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\n\n\ninterface NetworkConnectorArguments {\n  urls: { [chainId: number]: string };\n  defaultChainId?: number;\n}\n\n// taken from ethers.js, compatible interface with web3 provider\ntype AsyncSendable = {\n  isMetaMask?: boolean;\n  host?: string;\n  path?: string;\n  sendAsync?: (request: any, callback: (error: any, response: any) => void) => void;\n  send?: (request: any, callback: (error: any, response: any) => void) => void;\n}\n\nclass RequestError extends Error {\n  constructor(message: string, public code: number, public data?: unknown) {\n    super(message);\n  }\n}\n\ninterface BatchItem {\n  request: { jsonrpc: '2.0'; id: number; method: string; params: unknown };\n  resolve: (result: any) => void;\n  reject: (error: Error) => void;\n}\n\nclass MiniRpcProvider implements AsyncSendable {\n  public readonly isMetaMask: false = false;\n\n  public readonly chainId: number;\n\n  public readonly url: string;\n\n  public readonly host: string;\n\n  public readonly path: string;\n\n  public readonly batchWaitTimeMs: number;\n\n  private nextId = 1;\n\n  private batchTimeoutId: ReturnType<typeof setTimeout> | null = null;\n\n  private batch: BatchItem[] = [];\n\n  constructor(chainId: number, url: string, batchWaitTimeMs?: number) {\n    this.chainId = chainId;\n    this.url = url;\n    const parsed = new URL(url);\n    this.host = parsed.host;\n    this.path = parsed.pathname;\n    // how long to wait to batch calls\n    this.batchWaitTimeMs = batchWaitTimeMs ?? 50;\n  }\n\n  public readonly clearBatch = async () => {\n    console.info('Clearing batch', this.batch);\n    const { batch } = this;\n    this.batch = [];\n    this.batchTimeoutId = null;\n    let response: Response;\n    try {\n      response = await fetch(this.url, {\n        method: 'POST',\n        headers: { 'content-type': 'application/json', accept: 'application/json' },\n        body: JSON.stringify(batch.map((item) => item.request)),\n      });\n    } catch (error) {\n      batch.forEach(({ reject }) => reject(new Error('Failed to send batch call')));\n      return;\n    }\n\n    if (!response.ok) {\n      batch.forEach(({ reject }) => reject(new RequestError(`${response.status}: ${response.statusText}`, -32000)));\n      return;\n    }\n\n    let json\n    try {\n      json = await response.json();\n    } catch (error) {\n      batch.forEach(({ reject }) => reject(new Error('Failed to parse JSON response')));\n      return;\n    }\n    const byKey = batch.reduce<{ [id: number]: BatchItem }>((memo, current) => {\n      memo[current.request.id] = current\n      return memo\n    }, {});\n    // eslint-disable-next-line no-restricted-syntax\n    for (const result of json) {\n      const {\n        resolve,\n        reject,\n        request: { method },\n      } = byKey[result.id]\n      if (resolve !== undefined && reject !== undefined) {\n        if ('error' in result) {\n          reject(new RequestError(result?.error?.message, result?.error?.code, result?.error?.data))\n        } else if ('result' in result) {\n          resolve(result.result)\n        } else {\n          reject(new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, result))\n        }\n      }\n    }\n  }\n\n  public readonly sendAsync = (\n    request: { jsonrpc: '2.0'; id: number | string | null; method: string; params?: any },\n    callback: (error: any, response: any) => void\n  ): void => {\n    this.request(request.method, request.params)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  }\n\n  public readonly request = async (\n    method: string | { method: string; params: unknown[] },\n    params?: any\n  ): Promise<unknown> => {\n    if (typeof method !== 'string') {\n      return this.request(method.method, method.params);\n    }\n    if (method === 'eth_chainId') {\n      return `0x${this.chainId.toString(16)}`;\n    }\n    const promise = new Promise((resolve, reject) => {\n      this.batch.push({\n        request: {\n          jsonrpc: '2.0',\n          id: this.nextId++,\n          method,\n          params,\n        },\n        resolve,\n        reject,\n      });\n    });\n    this.batchTimeoutId = this.batchTimeoutId ?? setTimeout(this.clearBatch, this.batchWaitTimeMs);\n    return promise;\n  }\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  private readonly providers: { [chainId: number]: MiniRpcProvider };\n\n  private currentChainId: number;\n\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url');\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) });\n\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)]);\n      return accumulator;\n    }, {});\n  }\n\n  public get provider(): MiniRpcProvider {\n    return this.providers[this.currentChainId];\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null };\n  }\n\n  public async getProvider(): Promise<MiniRpcProvider> {\n    return this.providers[this.currentChainId];\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.currentChainId;\n  }\n\n  public async getAccount(): Promise<null> {\n    return null;\n  }\n\n  public deactivate() {\n    return null;\n  }\n}\n\nexport default NetworkConnector;\n","// https://github.com/pancakeswap/pancake-swap-interface-v1/blob/master/src/connectors/index.ts\nimport { Web3Provider } from '@ethersproject/providers';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { NetworkConnector } from './NetworkConnector';\nimport { ConnectorNames } from '../constants';\n\n\n\nexport const network = new NetworkConnector({\n  urls: {\n    1: 'https://localhost/',\n    4: 'https://localhost/',\n  },\n  defaultChainId: 1,\n});\n\nlet networkLibrary: Web3Provider | undefined;\nexport function getNetworkLibrary(): Web3Provider {\n  // eslint-disable-next-line no-return-assign\n  return (networkLibrary = networkLibrary ?? new Web3Provider(network.provider as any));\n}\n\nexport const injected = new InjectedConnector({\n  //supportedChainIds: [1],\n});\n\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n}\n","import React from 'react';\nimport { hot } from 'react-hot-loader';\nimport Seo from './Seo';\nimport Header from './Header';\nimport Footer from './Footer';\n\n\n\nfunction Page({ title, description, meta, children }) {\n  return (\n    <>\n      <Seo\n        title={title}\n        description={description}\n        meta={meta ? meta : []}\n      />\n      <Header />\n      <main style={{ minHeight: '100vh', }} >\n        {children}\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nexport default hot(module)(Page);\n","import * as React from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Helmet } from 'react-helmet';\nimport { appName } from '../constants';\n\n\n\nfunction Seo({ title, description, meta, }) {\n  const metaDescription = description;\n  const defaultTitle = appName;\n  const twitter = null;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang: 'en',\n      }}\n\n      title={title}\n      defaultTitle={defaultTitle}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : undefined}\n\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: twitter || '',\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    >\n      <meta name=\"viewport\" content=\"initial-scale=1, width=device-width\" />\n      <link\n        href=\"https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap\"\n        rel=\"stylesheet\"\n      />\n    </Helmet>\n  )\n}\n\nexport default hot(module)(Seo);\n","import React from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Segment, Container, Menu } from 'semantic-ui-react';\nimport { NavLink, Link } from 'react-router-dom';\nimport { routerPaths } from '../router/helper';\nimport { appName } from '../constants';\n//import * as S from '../store/selectors';\n//import * as A from '../store/actions';\n\n\nimport { useEagerConnect, useActiveWeb3React } from '../hooks/index';\nimport useAuth from '../hooks/useAuth';\n\n\nfunction Header() {\n  const triedEager = useEagerConnect();\n  const context = useActiveWeb3React();\n  const { library, chainId, account, active, error } = context;\n  const { login, logout } = useAuth();\n  //const { onPresentConnectModal, onPresentAccountModal } = useWalletModal(login, logout, account);\n\n  const accountShort = account\n    ? `${account.substring(0, 6)}...${account.substring(account.length - 4)}`\n    : 'Connect wallet';\n\n  return (\n    <Segment as={'header'}>\n      <Menu fixed='top' size='large' inverted>\n        <Container>\n          <Menu.Item header as={Link} to={routerPaths.main}>\n            WebMason.io\n          </Menu.Item>\n\n          {/*<Menu.Item position='right'\n            style={{ color: chainId === 1 ? 'green' : 'red' }}\n          >{chainId === 1 ? 'Mainnet' : 'Testnet'}</Menu.Item>*/}\n          <Menu.Item position='right'\n          //onClick={account ? onPresentAccountModal : onPresentConnectModal}\n          >{accountShort}</Menu.Item>\n        </Container>\n      </Menu>\n    </Segment>\n  );\n};\n\nexport default hot(module)(Header);\n","// https://github.com/pancakeswap/pancake-swap-interface-v1/blob/master/src/hooks/index.ts\nimport { Web3Provider } from '@ethersproject/providers';\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\n// eslint-disable-next-line import/no-unresolved\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\nimport { useEffect, useState } from 'react';\nimport { injected } from '../connectors';\nimport { ChainId, NetworkContextName } from '../constants/index';\n\n\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3ReactCore<Web3Provider>();\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\n\n// https://github.com/NoahZinsmeister/web3-react/blob/v6/example/hooks.ts\n// try to eagerly connect to an injected provider, if it exists and has granted access already\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore();\n\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true);\n    }\n  }, [tried, active]);\n\n  return tried;\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3ReactCore();\n\n  useEffect((): any => {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\");\n        activate(injected);\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId);\n        activate(injected);\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n        if (accounts.length > 0) {\n          activate(injected);\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId);\n        activate(injected);\n      }\n\n      ethereum.on('connect', handleConnect);\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      ethereum.on('networkChanged', handleNetworkChanged);\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect);\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n          ethereum.removeListener('networkChanged', handleNetworkChanged);\n        }\n      }\n    }\n  }, [active, error, suppress, activate]);\n}\n","import { useCallback } from 'react';\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector';\nimport { ConnectorNames } from '../constants';\nimport { connectorLocalStorageKey } from '../constants/index';\nimport { connectorsByName } from '../connectors';\nimport { toast } from 'react-toastify';\n\n\n\nconst useAuth = () => {\n  const { activate, deactivate } = useWeb3React();\n\n  const login = useCallback((connectorID: ConnectorNames) => {\n    const connector = connectorsByName[connectorID];\n    if (connector) {\n      activate(connector, async (error: Error) => {\n        window.localStorage.removeItem(connectorLocalStorageKey);\n        if (error instanceof UnsupportedChainIdError) {\n          toast.error('Unsupported Chain Id. Unsupported Chain Id Error. Check your chain Id.');\n        } else if (error instanceof NoEthereumProviderError) {\n          toast.error('Provider Error. No provider was found');\n        } else if (\n          error instanceof UserRejectedRequestErrorInjected\n        ) {\n          toast.error('Authorization Error. Please authorize to access your account');\n        } else {\n          toast.error(`${error.name} ${error.message}`);\n        }\n      });\n    } else {\n      toast.error(\"Can't find connector. The connector config is wrong\");\n    }\n  }, []);\n\n  return { login, logout: deactivate };\n}\n\nexport default useAuth;\n","import React from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Segment, Container, List } from 'semantic-ui-react';\n//import { Link } from 'react-router-dom';\nimport { appName } from '../constants';\n//import { routerPaths } from '../router/helper';\n//import getExternalLinkProps from '../utils/getExternalLinkProps';\n\n\n\nfunction Footer() {\n  return (\n    <Segment as={'footer'} inverted vertical >\n      <Container textAlign='center'>\n        <List inverted link horizontal>\n          <List.Item>\n            {appName} © {new Date().getFullYear()}.\n          </List.Item>\n        </List>\n      </Container>\n    </Segment >\n  );\n};\n\nexport default hot(module)(Footer);\n"],"sourceRoot":""}